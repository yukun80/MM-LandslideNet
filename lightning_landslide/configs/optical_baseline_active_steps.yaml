# =============================================================================
# optical_baseline_active_steps.yaml - 基于成功baseline的分步主动学习配置
# =============================================================================

# 基于 optical_swin_tiny_0724 成功实验的主动学习配置
# 前置条件：已完成基础训练并保存权重到 lightning_landslide/exp/optical_swin_tiny_0724/checkpoints/

# === 实验元信息 ===
experiment_name:  "multimodal_swin_tiny_0803"
description: "Stepwise active learning based on successful optical_swin_tiny_0724 baseline"
version: "2.0.0"

# 研究人员信息
author: "MM-LandslideNet Team"
notes: |
  分步主动学习实验，基于成功的 optical_swin_tiny_0724 基线模型。
  支持以下命令：
  1. python main.py train config.yaml                    # 基础训练（已完成）
  2. python main.py uncertainty_estimation config.yaml   # 不确定性估计  
  3. python main.py sample_selection config.yaml         # 样本选择
  4. python main.py retrain config.yaml                  # 模型fine-tuning

# === 全局设置 ===
seed: 3407
log_level: "INFO"

# === 模型配置 ===
# 与简化基线保持完全一致
model:
  target: lightning_landslide.src.models.LandslideClassificationModule
  params:
    base_model:
      target: lightning_landslide.src.models.optical_swin.OpticalSwinModel
      params:
        model_name: "swinv2_tiny_window16_256"
        input_channels: 13
        pretrained: true
        dropout_rate: 0.2
        pretrained_path: null
        img_size: 256
    
    # 分类头配置 - 与baseline一致
    classifier_config:
      type: "simple"              # 分类头类型：simple/mlp/attention
      hidden_dim: null            # MLP分类头的隐藏维度（simple类型时忽略）
      use_batch_norm: false       # 是否使用批标准化
      activation: "relu"          # 分类头中的激活函数

    # 损失函数：使用Focal Loss处理类别不平衡
    loss_config:
      type: "focal"
      focal_params: {alpha: 0.25, gamma: 2.0} # 或者0.25，需要实验？
    
    # 优化器：AdamW with differential learning rates
    optimizer_config:
      type: "adamw"
      adamw_params: {lr: 4e-5, weight_decay: 1e-2, betas: [0.9, 0.95]}
      differential_lr: {enable: true, backbone_lr_ratio: 0.1, classifier_lr_ratio: 1.0}
    
    # 学习率调度器：预热 + 余弦退火
    scheduler_config:
      type: "cosine_with_warmup"
      cosine_params:
        T_0: 20
        T_mult: 1
        eta_min: 1e-7
    
    # 评估指标
    metrics_config:
      primary_metric: "f1"
      metrics: ["accuracy", "precision", "recall", "f1", "auroc"]
      threshold: 0.5

# === 数据配置 ===
# 定义数据处理管道
data:
  target: lightning_landslide.src.data.MultiModalDataModule
  params:
    # 数据路径
    train_data_dir: "dataset/train_data"
    test_data_dir: "dataset/test_data"
    train_csv: "dataset/Train.csv"
    test_csv: "dataset/Test.csv"

    # === 通道配置 ===
    # 定义多模态数据的通道使用策略
    channel_config:
      channel_groups:
        optical: [0, 1, 2, 3]          # R, G, B, NIR - 光学遥感数据
        sar_amplitude: [4, 5, 8, 9]    # SAR幅度图 - 雷达数据的强度信息
        sar_difference: [6, 7, 10, 11] # SAR差值图 - 时间变化信息  
        derived: ["ndvi"]              # 派生指标 - 计算得出的植被指数

      # === 使用模式定义 - 为不同的实验提供预设的通道组合 ===
      usage_modes:
        # optical_only:
        #   groups: ["optical", "derived"]
        #   description: "仅使用光学数据，适合基线实验"
        
        full_multimodal:
          groups: ["optical", "derived", "sar_amplitude", "sar_difference"]  
          description: "使用全部模态，适合最终模型"
        
        # sar_focused:
        #   groups: ["sar_amplitude", "sar_difference"]
        #   description: "专注SAR数据，用于消融实验"

    # 通道配置：仅使用光学数据
    active_mode: "full_multimodal"
    
    # 数据加载配置
    batch_size: 32
    num_workers: 8
    pin_memory: true
    
    # 数据分割配置
    val_split: 0.2
    stratify: true
    shuffle_train: true

    # === 数据预处理配置 ===
    preprocessing:
      # 标准化参数 - 基于您的数据统计计算得出
      normalization:
        # 12个原始通道的均值和标准差
        means: [1849.282, 1953.906, 1896.493, 3291.47, -9.624, -17.110, 
                -0.699, -0.483, -10.671, -18.442, 0.248, -0.234]
        stds: [1414.462, 1338.292, 1342.528, 1448.362, 7.904, 9.245, 
               4.062, 4.283, 6.333, 8.691, 2.777, 3.932]
      
      # NDVI计算配置
      ndvi_computation:
        red_channel_idx: 0
        nir_channel_idx: 3
        epsilon: 1e-8
        clip_range: [-1, 1]

    # 数据增强配置
    augmentation:
      train:
        resize: 256
        # 几何增强
        geometric:
          random_flip: true
          h_flip_prob: 0.5
          v_flip_prob: 0.5
          random_rotation: true
          rotation_prob: 0.3
          rotation_degrees: [-10, 10]
        # 光谱增强
        spectral:
          spectral_noise: true
          noise_std: 0.005
          noise_prob: 0.3
      val: {resize: 256}
      test: {resize: 256}

# === 分步主动学习配置 ===
# 新增：主动学习特定配置
active_pseudo_learning:
  # 基本参数
  max_iterations: 5                     # 最大迭代次数
  annotation_budget: 50                 # 每轮标注预算
  
  # 不确定性估计配置
  uncertainty_estimation:
    method: "mc_dropout"                # 方法：mc_dropout
    params:
      n_forward_passes: 5              # MC Dropout前向传播次数
      use_temperature_scaling: false    # 是否使用温度缩放
      dropout_rate: 0.2                 # 与模型配置中的dropout_rate一致
  
  # 伪标签生成配置
  pseudo_labeling:
    confidence_threshold: 0.85          # 伪标签置信度阈值
    uncertainty_threshold: 0.1          # 不确定性阈值
    use_adaptive_threshold: false       # 是否使用自适应阈值
    use_class_balance: true             # 是否考虑类别平衡
    
    # 高级配置
    quality_weights:
      confidence_weight: 0.6            # 置信度权重
      uncertainty_weight: 0.3           # 不确定性权重
      consistency_weight: 0.1           # 一致性权重
  
  # 主动学习选择策略
  active_learning:
    budget_per_iteration: 50            # 每轮选择预算
    strategies:
      uncertainty: 0.6                  # 不确定性采样权重
      diversity: 0.3                    # 多样性采样权重
      cluster_based: 0.1                # 聚类采样权重
    
    # 多样性配置
    diversity_params:
      distance_metric: "cosine"         # 距离度量
      n_clusters: 10                    # 聚类数量
      feature_layer: "backbone"         # 特征提取层
    
    # 聚类配置
    cluster_params:
      cluster_method: "kmeans"          # 聚类方法
      n_init: 10                        # K-means初始化次数

# === 训练器配置 ===
# 主要用于重训练步骤
trainer:
  target: pytorch_lightning.Trainer
  params:
    max_epochs: 100
    accelerator: "gpu"         # 使用GPU
    devices: 1                 # 使用1个GPU
    precision: "32-true"       # 使用32位精度，不使用混合精度
    
    # 验证配置
    val_check_interval: 1.0     # 每个epoch后验证，每个epoch验证一次
    check_val_every_n_epoch: 1  # 每个epoch验证一次
    
    # 梯度配置
    gradient_clip_val: 1.0      # 梯度裁剪
    accumulate_grad_batches: 1  # 梯度累积
    
    # 性能优化
    enable_progress_bar: true   # 显示进度条
    enable_model_summary: true  # 显示模型摘要
    deterministic: false        # 为了性能，不要求完全确定性

# === 回调函数配置 ===
# 定义训练过程中的监控、保存和控制策略
callbacks:
  # 模型检查点
  model_checkpoint:
    target: pytorch_lightning.callbacks.ModelCheckpoint
    params:
      dirpath: "lightning_landslide/exp/${experiment_name}/checkpoints"  # ✅ 使用实验名称路径
      filename: "best-{epoch:02d}-{val_f1:.4f}"
      monitor: "val_f1"         # 监控指标
      mode: "max"               # 最大值
      save_top_k: 1              # 保存最好的1个模型
      save_last: true            # 保存最后一个模型
      verbose: true              # 显示详细信息
  
  # 早停：防止过拟合
  early_stopping:
    target: pytorch_lightning.callbacks.EarlyStopping
    params:
      monitor: "val_f1"         # 监控指标
      mode: "max"               # 最大值
      patience: 20              # 早停次数
      verbose: true              # 显示详细信息
      strict: false              # 非严格模式，允许指标偶尔不存在
      min_delta: 0.001
  
  # 学习率监控：追踪学习率变化
  lr_monitor:
    target: pytorch_lightning.callbacks.LearningRateMonitor
    params:
      logging_interval: "epoch"  # 记录学习率变化
      log_momentum: false        # 不记录动量
  
  # 自定义回调：模型统计和可视化
  metrics_logger:
    target: lightning_landslide.src.utils.metrics.MetricsLogger
    params:
      summary_interval: 10  # 每10个epoch打印详细总结
      save_history: true   # 保存完整历史

# === 日志记录器配置（修复版）===
# 🔧 关键修复：使用实验名称作为目录名
logger:
  target: pytorch_lightning.loggers.TensorBoardLogger
  params:
    save_dir: "lightning_landslide/exp"           # ✅ 基础目录
    name: "${experiment_name}"                    # ✅ 使用实验名称作为子目录名
    version: ""                                   # ✅ 不使用version编号
    log_graph: false
    default_hp_metric: false

# === 输出目录配置 ===
# 定义所有输出文件的保存位置
outputs:
  base_dir: "lightning_landslide/exp"
  experiment_dir: "lightning_landslide/exp/${experiment_name}"
  checkpoints_dir: "${outputs.experiment_dir}/checkpoints"
  logs_dir: "${outputs.experiment_dir}/logs"
  predictions_dir: "${outputs.experiment_dir}/predictions"
  active_learning_dir: "${outputs.experiment_dir}/active_learning"  # 主动学习专用目录
  
  # 主动学习保存设置
  save_config: true
  save_predictions: true
  save_model_summary: true
  save_uncertainty_scores: true        # 保存不确定性分数
  save_selection_history: true         # 保存选择历史
  save_annotation_results: true        # 保存标注结果

# === 计算配置 ===
compute:
  # GPU配置
  gpu_ids: [0]                  # 使用的GPU列表
  mixed_precision: false        # 不启用混合精度训练
  
  # 内存优化
  find_unused_parameters: false # DDP时是否查找未使用参数
  sync_batchnorm: true          # 是否同步批标准化

  # 性能监控
  profiler: null                # 性能分析器：null/simple/advanced/pytorch
  
# === 实验特定配置 ===
# 这个实验的特殊设置和超参数
experiment_config:
  # 数据平衡策略
  class_balance_strategy: "focal_loss"  # focal_loss/weighted_sampling/cost_sensitive
  
  # 评估策略
  evaluation_strategy:
    use_tta: true
    tta_augmentations: 4
    confidence_threshold: 0.5
  
  reporting:
    generate_confusion_matrix: true
    generate_roc_curve: true
    generate_precision_recall_curve: true
    save_predictions: true
    save_model_summary: true
