# =============================================================================
# configs/models/optical_swin.yaml - 光学Swin Transformer模型配置
# =============================================================================

# 这个配置文件定义了您的光学基线模型的完整架构和训练策略
# 它展示了"配置驱动"设计的强大之处：复杂的模型定义变成了简洁的配置文件

# Lightning模块的目标类 - 这是您的核心训练模块
target: lightning_landslide.src.models.LandslideClassificationModule

# 模型的所有参数配置
params:
  # === 基础模型配置 ===
  # 这里定义了底层的特征提取器（骨干网络）
  base_model:
    target: lightning_landslide.src.models.optical_swin.OpticalSwinModel
    params:
      # Swin Transformer的具体变体
      model_name: "swin_tiny_patch4_window7_224"
      
      # 输入通道数 - 对应光学数据的5个通道（R,G,B,NIR,NDVI）
      input_channels: 5
      
      # 分类任务配置
      num_classes: 1          # 二分类任务（滑坡/非滑坡）
      dropout_rate: 0.2       # Dropout率，防止过拟合
      
      # 预训练权重配置
      pretrained: true        # 使用ImageNet预训练权重
      freeze_backbone: false  # 是否冻结骨干网络
      
      # 高级模型配置
      use_gradient_checkpointing: false  # 梯度检查点，节省显存但增加计算时间
      activation_function: "gelu"        # 激活函数类型
  
  # === 分类头配置 ===
  # 定义从特征到最终预测的映射
  classifier_config:
    type: "simple"              # 分类头类型：simple/mlp/attention
    hidden_dim: null            # MLP分类头的隐藏维度（simple类型时忽略）
    use_batch_norm: false       # 是否使用批标准化
    activation: "relu"          # 分类头中的激活函数
  
  # === 损失函数配置 ===
  # 这是处理类别不平衡问题的关键配置
  loss_config:
    type: "focal"               # 损失函数类型：bce/weighted_bce/focal/dice/combined
    
    # Focal Loss特定参数 - 专门处理困难样本和类别不平衡
    focal_params:
      alpha: 1.0                # 类别权重
      gamma: 2.0                # 聚焦参数，gamma越大越关注困难样本
      
    # 如果使用weighted_bce，定义正样本权重
    pos_weight: 10.0            # 正样本（滑坡）的权重，补偿类别不平衡
    
    # 如果使用combined损失，定义权重
    loss_weights:
      focal: 0.7
      dice: 0.3
  
  # === 优化器配置 ===
  # 定义模型的学习策略
  optimizer_config:
    type: "adamw"               # 优化器类型：adam/adamw/sgd
    
    # AdamW特定参数
    adamw_params:
      lr: 1e-4                  # 学习率
      weight_decay: 1e-4        # 权重衰减，L2正则化
      betas: [0.9, 0.999]       # Adam的动量参数
      eps: 1e-8                 # 数值稳定性参数
    
    # 差分学习率配置 - 对不同模块使用不同学习率
    differential_lr:
      enable: true
      backbone_lr_ratio: 0.1    # 骨干网络使用更小的学习率
      classifier_lr_ratio: 1.0  # 分类头使用标准学习率
  
  # === 学习率调度器配置 ===
  # 定义训练过程中学习率的变化策略
  scheduler_config:
    type: "cosine_with_warmup"  # 调度器类型
    
    # 预热+余弦退火调度器参数
    cosine_params:
      warmup_epochs: 5          # 预热轮数
      min_lr_ratio: 0.01        # 最小学习率比例
      
    # 其他调度器选项
    step_params:                # 阶梯式学习率（备选）
      step_size: 30
      gamma: 0.1
    
    plateau_params:             # 自适应学习率（备选）
      patience: 5
      factor: 0.5
      threshold: 1e-4
  
  # === 评估指标配置 ===
  # 定义模型性能的评估方法
  metrics_config:
    # 主要指标 - 用于模型选择和早停
    primary_metric: "f1"
    
    # 所有需要计算的指标
    metrics:
      - "accuracy"
      - "precision" 
      - "recall"
      - "f1"
      - "auroc"                 # 接收者操作特征曲线下面积
      - "average_precision"     # 平均精度
      - "confusion_matrix"
    
    # 指标计算配置
    threshold: 0.5              # 二分类阈值
    average_method: "binary"     # 多分类时的平均方法
  
  # === 模型检查点配置 ===
  # 定义模型保存和加载策略
  checkpoint_config:
    save_top_k: 3               # 保存最好的k个模型
    monitor_metric: "val_f1"    # 监控的指标
    monitor_mode: "max"         # 最大化还是最小化监控指标
    
    # 权重保存选项
    save_weights_only: false    # 是否只保存权重（不保存优化器状态）
    save_last: true             # 是否保存最后一个epoch的模型
  
  # === 训练行为配置 ===
  # 控制训练过程的细节行为
  training_config:
    # 早停配置
    early_stopping:
      patience: 15              # 耐心期：多少个epoch没有改进就停止
      min_delta: 1e-4           # 最小改进阈值
      
    # 梯度相关配置  
    gradient_clip_val: 1.0      # 梯度裁剪值
    accumulate_grad_batches: 1  # 梯度累积批次数
    
    # 验证配置
    val_check_interval: 1.0     # 验证检查间隔
    limit_val_batches: 1.0      # 限制验证批次数（用于快速调试）
    
    # 日志配置
    log_every_n_steps: 50       # 每n步记录一次日志
    
  # === 数据预处理配置 ===
  # 模型特定的数据预处理需求
  preprocessing_config:
    # 输入尺寸调整
    target_size: 224            # Swin Transformer的标准输入尺寸
    resize_mode: "bilinear"     # 插值方法
    
    # 通道顺序和标准化
    channel_order: "RGB"        # 颜色通道顺序
    normalize_per_channel: true # 是否每个通道独立标准化
    
    # 特殊处理
    handle_nan_values: true     # 如何处理NaN值
    nan_fill_value: 0.0         # NaN值的填充值
  
  # === 模型输出配置 ===
  # 定义模型的输出格式和后处理
  output_config:
    return_features: false      # 是否返回中间特征
    return_attention: false     # 是否返回注意力权重
    
    # 预测后处理
    apply_sigmoid: true         # 是否对logits应用sigmoid
    prediction_threshold: 0.5   # 预测阈值
    
    # TTA（测试时增强）配置
    tta_config:
      enable: true              # 是否启用TTA
      n_augmentations: 4        # 增强次数
      aggregation_method: "mean" # 聚合方法：mean/max/voting