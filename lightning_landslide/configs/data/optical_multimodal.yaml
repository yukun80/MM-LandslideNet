# =============================================================================
# configs/data/optical_multimodal.yaml - 多模态数据配置
# =============================================================================

# 这个配置文件定义了您的多模态滑坡数据的处理方式
# 它将替代您原来的optical_data.yaml，提供更强的灵活性和扩展性

# 数据模块的目标类 - 这里指向您的数据模块实现
target: lightning_landslide.src.data.MultiModalDataModule

# 数据模块的所有参数
params:
  # === 数据路径配置 ===
  # 这些路径应该与您的数据集结构保持一致
  train_data_dir: "dataset/train_data"
  test_data_dir: "dataset/test_data"
  train_csv: "dataset/Train.csv"
  test_csv: "dataset/Test.csv"
  exclude_ids_file: "dataset/data_check/exclude_ids.json"
  
  # === 通道配置 ===
  # 定义多模态数据的通道使用策略
  channel_config:
    total_channels: 13
    
    # 通道分组定义 - 这让我们可以灵活选择使用哪些模态
    channel_groups:
      optical: [0, 1, 2, 3]          # R, G, B, NIR - 光学遥感数据
      sar_amplitude: [4, 5, 8, 9]    # SAR幅度图 - 雷达数据的强度信息
      sar_difference: [6, 7, 10, 11] # SAR差值图 - 时间变化信息  
      derived: ["ndvi"]              # 派生指标 - 计算得出的植被指数
    
    # 使用模式定义 - 为不同的实验提供预设的通道组合
    usage_modes:
      optical_only:
        groups: ["optical", "derived"]
        description: "仅使用光学数据，适合基线实验"
      
      full_multimodal:
        groups: ["optical", "derived", "sar_amplitude", "sar_difference"]  
        description: "使用全部模态，适合最终模型"
      
      sar_focused:
        groups: ["sar_amplitude", "sar_difference"]
        description: "专注SAR数据，用于消融实验"
  
  # 当前实验使用的模式
  active_mode: "optical_only"
  
  # === 数据加载配置 ===
  batch_size: 64
  num_workers: 8
  pin_memory: true
  shuffle_train: true
  
  # === 数据分割配置 ===
  val_split: 0.2                    # 验证集比例
  stratify: true                    # 分层采样，保持类别平衡
  use_weighted_sampling: false      # 是否使用加权采样处理类别不平衡
  
  # === 数据预处理配置 ===
  preprocessing:
    # 标准化参数 - 基于您的数据统计计算得出
    normalization:
      # 12个原始通道的均值和标准差
      means: [1849.282, 1953.906, 1896.493, 3291.47, -9.624, -17.110, 
              -0.699, -0.483, -10.671, -18.442, 0.248, -0.234]
      stds: [1414.462, 1338.292, 1342.528, 1448.362, 7.904, 9.245, 
             4.062, 4.283, 6.333, 8.691, 2.777, 3.932]
    
    # NDVI计算配置
    ndvi_computation:
      red_channel_idx: 0      # 红光通道索引
      nir_channel_idx: 3      # 近红外通道索引
      epsilon: 1e-8           # 避免除零的小值
      clip_range: [-1, 1]     # NDVI值裁剪范围
  
  # === 数据增强配置 ===
  augmentation:
    # 训练时数据增强策略
    train:
      # 几何变换
      geometric:
        random_flip: true
        h_flip_prob: 0.5
        v_flip_prob: 0.5
        random_rotation: true
        rotation_prob: 0.5
        rotation_degrees: [-15, 15]
      
      # 光谱增强 - 针对遥感数据的特殊增强
      spectral:
        # 添加光谱噪声，模拟大气干扰
        spectral_noise: true
        noise_std: 0.01
        noise_prob: 0.5
        
        # 光谱带偏移，模拟传感器差异
        band_shift: false
        shift_range: 0.05
        shift_prob: 0.3
      
      # 高级增强 - 可选的复杂增强策略
      advanced:
        # 大气散射模拟
        atmospheric_scattering: false
        scattering_strength: 0.1
        scattering_prob: 0.3
        
        # NDVI保持增强 - 确保增强后NDVI仍然合理
        ndvi_preserving: true
        intensity_range: [0.8, 1.2]
        ndvi_aug_prob: 0.4
    
    # 验证和测试时只进行标准化
    val:
      geometric: {}
      spectral: {}
      advanced: {}
    
    test:
      geometric: {}
      spectral: {}
      advanced: {}
  
  # === 数据质量控制 ===
  quality_control:
    validate_on_setup: true           # 数据模块初始化时是否验证数据
    max_validation_samples: 100       # 最大验证样本数
    check_nan_values: true            # 检查NaN值
    check_infinite_values: true       # 检查无穷值
    value_range_check: true           # 检查数值范围是否合理
    
    # 数据范围检查配置
    expected_ranges:
      optical_channels: [0, 10000]    # 光学通道预期范围
      sar_channels: [-50, 50]         # SAR通道预期范围
      ndvi_range: [-1, 1]             # NDVI预期范围
  
  # === 缓存配置 ===
  caching:
    enable_cache: false               # 是否启用数据缓存
    cache_dir: "cache/processed_data" # 缓存目录
    cache_validation: true            # 是否验证缓存有效性